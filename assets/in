#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname "$0")/common.sh

# Read inputs
payload="$(cat <&0)"

version_string=$(jq -r '.version.version // ""' <<< $payload)

if [ -z "$version_string" ]; then
  echo "invalid payload (missing version)"
  exit 1
fi

skip_download=$(jq -r '.params.skip_download // ""' <<< $payload)

# Prepare
setup_resource
echo "Resource setup successful."

cd "$1"

[ -n "$scope" ] \
&& fqpn="@$scope/$package" \
|| fqpn="$package"

if [ ! "$skip_download" = "true" ]; then
  echo "Loading package $fqpn version $version_string"
  cat > package.json <<EOT
{"descriptions":"npm-resource get step","repository":{},"readme":"npm-resource get step","license":"Apache-2.0"}
EOT
  npm i -S "$fqpn@$version_string"
else
  echo "Skipping download"
fi

echo "$version_string" \
> $1/version

echo "{\"version\":{\"version\":\"$version_string\"}}" \
| jq . \
>&3
